// Set your project Prefix using your GUID
def prefix      = "user15"

// Set variable globally to be available in all stages
// Set Maven command to always include Nexus Settings
def mvnNexusCmd = "mvn -s ./nexus_openshift_settings.xml"
def mvnSonarCmd = "mvn -s ./sonar_openshift_settings.xml"
// Set Development and Production Project Names
def devProject  = "${prefix}-tasks-dev"
def prodProject = "${prefix}-tasks-prod"
// Set the tag for the development image: version + build number
def devTag      = "0.0-0"
// Set the tag for the production image: version
def prodTag     = "0.0"
def destApp     = "tasks-green"
def activeApp   = ""
def svcName     = "tasks"
def prodRegistry = "nexus-docker.user15-nexus.svc.cluster.local:5000"
def prodToken   = "bla"

pipeline {
  agent {
    // Using the Jenkins Agent Pod that we defined earlier
    label "maven-appdev"
  }
  stages {
    // Checkout Source Code and calculate Version Numbers and Tags
    stage('Checkout Source') {
      steps {
        // Get code from protected Git repository
        git credentialsId: '0d6445d8-38d2-4103-90bc-0521efa0834b', url: 'http://gogs-gogs-user15-gogs.apps.cluster-c78c.c78c.example.opentlc.com/CICDLabs/openshift-tasks-private.git'

       script {
          def pom = readMavenPom file: 'pom.xml'
          def version = pom.version

          // Set the tag for the development image: version + build number.
          devTag = pom.version + "-" + currentBuild.number

          // Set the tag for the production image: version
          prodTag = pom.version

          echo "Dev build tag is ${devTag}"
          echo "Prod build tag is ${prodTag}"
        }
      }
    }

    // Using Maven build the war file
    // Do not run tests in this step
    stage('Build War File') {
      steps {
        echo "Building version ${devTag}"
        sh "${mvnNexusCmd} clean package -DskipTests"
      }
    }

    // Using Maven run the unit tests
    stage('Unit Tests') {
      steps {
        echo "Running Unit Tests"
        sh "${mvnNexusCmd} test"
      }
    }

    //Using Maven call SonarQube for Code Analysis
    stage('Code Analysis') {
      steps {
        echo "Running Code Analysis"
        // sh "${mvnSonarCmd} sonar:sonar -Dsonar.projectName=${JOB_BASE_NAME}"
      }
    }

    // Publish the built war file to Nexus
    stage('Publish to Nexus') {
      steps {
        echo "Publish to Nexus"
        sh "${mvnNexusCmd} deploy"
      }
    }

    // Build the OpenShift Image in OpenShift and tag it.
    stage('Build and Tag OpenShift Image') {
      steps {
        echo "Building OpenShift container image tasks:${devTag}"
        script {
            openshift.withCluster(){
                openshift.withProject("user15-tasks-dev"){
                    def bc = openshift.selector("buildconfig/tasks")
                    bc.describe()
                    bc.startBuild("--from-file=http://nexus.${prefix}-nexus.svc.cluster.local:8081/repository/releases/org/jboss/quickstarts/eap/tasks/${prodTag}/tasks-${prodTag}.war")

                    def builds = bc.related('builds')

                    timeout(10) {
                        echo "Waiting for builds to complete..."

                        builds.untilEach(1) {
                            return it.object().status.phase == "Complete"
                        }
                    }

                    echo "Tagging tasks:latest with tasks:${devTag}"
                    openshift.tag("tasks:latest", "tasks:${devTag}")
                }
            }
         }
      }
    }

    // Deploy the built image to the Development Environment.
    stage('Deploy to Dev') {
      steps {
        echo "Deploy container image to Development Project"
        script {
            openshift.withCluster(){
                openshift.withProject("user15-tasks-dev"){
                    echo "Modifying tasks deployment to deploy image with tag ${devTag}"
                    openshift.set("image", "dc/tasks", "tasks=image-registry.openshift-image-registry.svc:5000/${prefix}-tasks-dev/tasks:${devTag}")

                    echo "Updating tasks configmap"
                    openshift.selector( 'cm', 'tasks-config' ).delete('--ignore-not-found')
                    openshift.create('configmap', 'tasks-config', '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties')

                    echo "Rolling out latest tasks deployment"
                    def dc = openshift.selector("dc", "tasks")
                    dc.rollout().latest()

                    timeout(10) {
                        echo "Waiting for deployment to finish..."
                        dc.rollout().status()
                    }

                    def connected = openshift.verifyService("${svcName}")
                    if (connected) {
                        echo "Able to connect to ${svcName}"
                    } else {
                        error "Unable to connect to ${svcName}"
                    }
                }
            }
        }
      }
    }

    // Run Integration Tests in the Development Environment.
    stage('Integration Tests') {
      steps {
        echo "Running Integration Tests"
        script {
          def status = "000"

          // Create a new task called "integration_test_1"
          echo "Creating task"
          // The next bit works - but only after the application
          // has been deployed successfully
          status = sh(returnStdout: true, script: "curl -sw '%{response_code}' -o /dev/null -u 'tasks:redhat1' -H 'Content-Length: 0' -X POST http://tasks.${prefix}-tasks-dev.svc.cluster.local:8080/ws/tasks/integration_test_1").trim()
           echo "Status: " + status
          if (status != "201") {
		error 'Integration Create Test Failed!'
          }

	  // XXX: This only works after a redeployment. Otherwise the task id will change with every CRD cycle.
	  //
          echo "Retrieving tasks"
          status = sh(returnStdout: true, script: "curl -sw '%{response_code}' -o /dev/null -u 'tasks:redhat1' -X GET http://tasks.${prefix}-tasks-dev.svc.cluster.local:8080/ws/tasks/1").trim()
          echo "Status: " + status
          if (status != "200") {
		error 'Integration Retrieve Test Failed!'
          }

          echo "Deleting tasks"
          status = sh(returnStdout: true, script: "curl -sw '%{response_code}' -o /dev/null -u 'tasks:redhat1' -X DELETE http://tasks.${prefix}-tasks-dev.svc.cluster.local:8080/ws/tasks/1").trim()
          echo "Status: " + status
          if (status != "204") {
		error 'Integration Delete Test Failed!'
          }
        }
      }
    }

    // Copy Image to Nexus Container Registry
    stage('Copy Image to Nexus Container Registry') {
      steps {
        echo "Copy image to Nexus Container Registry"
	script {
	  openshift.withCluster() {
            openshift.withProject("user15-tasks-dev") {
              openshift.tag("tasks:${devTag}", "tasks:${prodTag}")

	      def srcApplicationRef = openshift.selector("istag", "tasks:${prodTag}").object().image.dockerImageReference
	      def destApplicationRef = "${prodRegistry}/${prodProject}/tasks:${prodTag}"
	      def srcToken = readFile "/run/secrets/kubernetes.io/serviceaccount/token"

	      sh "skopeo copy docker://${srcApplicationRef} docker://${destApplicationRef} --src-creds openshift:${srcToken} --src-tls-verify=false --dest-creds admin:app_deploy --dest-tls-verify=false"
	    }
	  }
	}
      }
    }

    // Blue/Green Deployment into Production
    // -------------------------------------
    // Do not activate the new version yet.
    stage('Blue/Green Production Deployment') {
      steps {
        echo "Blue/Green Deployment"

        // TBD: 1. Determine which application is active
        //      2. Update the image for the other application
        //      3. Deploy into the other application
        //      4. Recreate Config maps for other application
        //      5. Wait until application is running
        //         See above for example code
	script {
	  openshift.withCluster() {
            openshift.withProject("${prodProject}") {
	      def next = "tasks-blue"
	      def route = openshift.selector("route", "tasks").object()
	      def srcImageURL = "${prodRegistry}/${prodProject}/tasks:${prodTag}"

	      echo "Currently ${route.spec.to.name} is active"

	      if ( route.spec.to.name == "tasks-blue") {
		next = "tasks-green"
	      }

	      // TBD: image update to pull from nexus
	      openshift.set("image", "dc/${next}", "${next}=${srcImageURL}")

	      echo "Going to deploy ${next}"
              def dc = openshift.selector("dc", next)
              dc.rollout().latest()

	      timeout(10) {
                echo "Waiting for deployment to finish..."
                dc.rollout().status()
              }

	      echo "Checking service availabilty for  ${next}"
              def connected = openshift.verifyService("${next}")
              if (connected) {
                echo "Able to connect to ${next}"
              } else {
                error "Unable to connect to ${next}"
              }
	    }
	  }
	}
      }
    }

    stage('Switch over to new Version') {
      steps {
        // TBD: Stop for approval


        echo "Executing production switch"
        // TBD: After approval execute the switch

      }
    }
  }
}
